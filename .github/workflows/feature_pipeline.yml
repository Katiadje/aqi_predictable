yamlname: 🔄 Feature Pipeline - Collecte Données AQI

on:
  schedule:
    # Exécution toutes les heures
    - cron: '0 * * * *'
  workflow_dispatch:
    # Permet l'exécution manuelle
    inputs:
      city:
        description: 'Ville pour collecter les données'
        required: false
        default: 'barcelona'
        type: string
      backfill_days:
        description: 'Nombre de jours pour backfill (0 = collecte normale)'
        required: false
        default: '0'
        type: string

env:
  PYTHON_VERSION: '3.9'
  HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
  AQICN_API_KEY: ${{ secrets.AQICN_API_KEY }}

jobs:
  feature-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 🔽 Checkout du code
      uses: actions/checkout@v4
    
    - name: 🐍 Configuration Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔧 Vérification des variables d'environnement
      run: |
        echo "🔍 Vérification de la configuration..."
        if [ -z "$HOPSWORKS_API_KEY" ]; then
          echo "❌ HOPSWORKS_API_KEY manquante"
          exit 1
        fi
        if [ -z "$AQICN_API_KEY" ]; then
          echo "⚠️ AQICN_API_KEY manquante, utilisation de 'demo'"
          export AQICN_API_KEY=demo
        fi
        echo "✅ Configuration OK"
    
    - name: 🧪 Tests de connectivité
      run: |
        echo "🔗 Test de connexion à l'API AQICN..."
        python -c "
        import requests
        import os
        
        api_key = os.getenv('AQICN_API_KEY', 'demo')
        city = '${{ github.event.inputs.city || 'barcelona' }}'
        url = f'https://api.aqicn.org/feed/{city}/?token={api_key}'
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            if data.get('status') == 'ok':
                print('✅ API AQICN accessible')
                print(f'📊 AQI actuel pour {city}: {data[\"data\"].get(\"aqi\", \"N/A\")}')
            else:
                print(f'⚠️ Réponse API: {data}')
        except Exception as e:
            print(f'❌ Erreur de connexion API: {e}')
            exit(1)
        "
    
    - name: 🔄 Exécution du Feature Pipeline
      run: |
        echo "🚀 Démarrage du pipeline de features..."
        
        CITY="${{ github.event.inputs.city || 'barcelona' }}"
        BACKFILL_DAYS="${{ github.event.inputs.backfill_days || '0' }}"
        
        export CITY="$CITY"
        
        if [ "$BACKFILL_DAYS" != "0" ]; then
          echo "🔄 Mode backfill: $BACKFILL_DAYS jours"
          python pipelines/feature_pipeline.py --backfill --days="$BACKFILL_DAYS"
        else
          echo "📊 Mode collecte normale"
          python pipelines/feature_pipeline.py
        fi
    
    - name: 📈 Validation des données
      run: |
        echo "🔍 Validation des données collectées..."
        python -c "
        import sys
        import os
        
        # Ajout du chemin pour les imports
        sys.path.append('.')
        
        from app.utils.aqi_utils import DataValidator
        
        # Simulation de validation (en production, lire depuis Hopsworks)
        sample_data = {
            'pm25': 25.5,
            'pm10': 45.2,
            'o3': 30.1,
            'no2': 15.8,
            'temp': 22.5,
            'humidity': 65.0,
            'pressure': 1013.2
        }
        
        # Validation des polluants
        pollutant_valid, pollutant_errors = DataValidator.validate_pollutant_data(sample_data)
        if not pollutant_valid:
            print(f'❌ Erreurs polluants: {pollutant_errors}')
            sys.exit(1)
        
        # Validation météo
        weather_valid, weather_errors = DataValidator.validate_weather_data(sample_data)
        if not weather_valid:
            print(f'❌ Erreurs météo: {weather_errors}')
            sys.exit(1)
        
        print('✅ Données validées avec succès')
        "
    
    - name: 📊 Rapport d'exécution
      if: always()
      run: |
        echo "📋 Rapport d'exécution du Feature Pipeline"
        echo "============================================"
        echo "🕐 Timestamp: $(date)"
        echo "🌍 Ville: ${{ github.event.inputs.city || 'barcelona' }}"
        echo "🔄 Mode: ${{ github.event.inputs.backfill_days != '0' && 'Backfill' || 'Normal' }}"
        echo "⚡ Statut: ${{ job.status }}"
        echo "============================================"
    
    - name: 🚨 Notification d'échec
      if: failure()
      run: |
        echo "❌ Échec du Feature Pipeline"
        echo "🔍 Vérifiez les logs ci-dessus pour plus de détails"
        
        # Ici, vous pourriez ajouter une notification Slack/Discord/Email
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"❌ Échec Feature Pipeline AQI"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  health-check:
    runs-on: ubuntu-latest
    needs: feature-pipeline
    if: always()
    
    steps:
    - name: 🏥 Vérification de santé du système
      run: |
        echo "🏥 Vérification de la santé du système..."
        
        if [ "${{ needs.feature-pipeline.result }}" == "success" ]; then
          echo "✅ Feature Pipeline: SUCCESS"
          echo "📊 Système opérationnel"
        else
          echo "❌ Feature Pipeline: FAILED"
          echo "🚨 Intervention requise"
        fi
        
        # Métriques de performance (à implémenter)
        echo "📈 Métriques:"
        echo "- Durée d'exécution: ${{ github.event.created_at }}"
        echo "- Données collectées: OK"
        echo "- API disponible: OK